#!env python
import pysag
import argparse
import os
import shutil
import errno
import SimpleHTTPServer
import SocketServer


def run():
    print "Generating data in {} from {}".format(site_dir, data_dir)
    # Cleanse the pallate
    if os.path.isdir(site_dir):
        shutil.rmtree(site_dir)

    # Generate the api. PYSAG! ^_^
    reader = pysag.Reader()
    writer = pysag.Writer()
    writer.write(
        reader.read(data_dir),
        "{}/{}".format(site_dir, api_dir)
    )

    # Copy top level (static) files to the site dir. Exclude the data dir and the
    # site dir itself. Also exclude hidden files/folders.
    exclude_dirs = [data_dir, site_dir]
    to_copy = [x for x in os.listdir('.') if x not in exclude_dirs and '.' != x[0]]

    for item in to_copy:
        try:
            shutil.copytree(item, "{}/{}".format(site_dir, item))
        except OSError as exc:
            if exc.errno == errno.ENOTDIR:
                shutil.copy(item, "{}/{}".format(site_dir, item))
            else:
                raise


def serve():
    # Serve up the site directory
    os.chdir(site_dir)

    Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
    httpd = SocketServer.ForkingTCPServer(("", port), Handler)

    print "Serving {} on port {}".format(site_dir, port)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    finally:
        print "\nStopping server"
        httpd.server_close()

if '__main__' == __name__:
    data_dir = '_data'
    site_dir = '_site'
    api_dir = 'api'
    port = 8000

    # Source in user defined configuration if present
    if os.path.exists('pysag.py'):
        execfile('pysag.py')

    commands= ['help', 'run', 'serve']

    parser = argparse.ArgumentParser(description='The Python Static API Generator')
    parser.add_argument('command', choices=commands, help='The pysag action to take', default='help')

    args = parser.parse_args()

    if 'help' == args.command:
        parser.print_help()
    elif 'run' == args.command:
        run()
    elif 'serve' == args.command:
        run()
        serve()
